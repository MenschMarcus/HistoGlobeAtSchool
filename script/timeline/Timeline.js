// Generated by CoffeeScript 1.8.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

if (window.HG == null) {
  window.HG = {};
}

HG.Timeline = (function() {
  function Timeline(config) {
    this._animTimeline = __bind(this._animTimeline, this);
    this._zoom = __bind(this._zoom, this);
    this.getMaxYear = __bind(this.getMaxYear, this);
    this.getMinYear = __bind(this.getMinYear, this);
    var defaultConfig;
    HG.mixin(this, HG.CallbackContainer);
    HG.CallbackContainer.call(this);
    this.addCallback("onNowChanged");
    this.addCallback("onIntervalChanged");
    this.addCallback("onZoom");
    defaultConfig = {
      parentDiv: void 0,
      timelineZoom: 1,
      minYear: 1850,
      maxYear: 2000,
      nowYear: 1925,
      speedometer: true,
      epochs: []
    };
    this._config = $.extend({}, defaultConfig, config);
    this._uiElements = {
      tl: this.addUIElement("tl", "swiper-container", this._config.parentDiv),
      tl_wrapper: this.addUIElement("tl_wrapper", "swiper-wrapper", tl),
      tl_slide: this.addUIElement("tl_slide", "swiper-slide", tl_wrapper),
      timeBars: [],
      dateMarkers: new HG.DoublyLinkedList()
    };
    this._now = {
      date: this.yearToDate(this._config.nowYear),
      marker: new HG.NowMarker(this, this._uiElements.nowMarker, this._config.speedometer)
    };
    this._moveDelay = 0;
    if (this._timeline_swiper == null) {
      this._timeline_swiper = new Swiper('#tl', {
        mode: 'horizontal',
        freeMode: true,
        momentumRatio: 0.5,
        scrollContainer: true,
        onTouchStart: (function(_this) {
          return function() {
            _this._animationTargetDate = null;
            if (_this._play) {
              return _this._now.marker.animationSwitch();
            }
          };
        })(this),
        onTouchMove: (function(_this) {
          return function() {
            var fireCallbacks;
            fireCallbacks = false;
            if (++_this._moveDelay === 10) {
              _this._moveDelay = 0;
              fireCallbacks = true;
            }
            _this._updateNowDate(fireCallbacks);
            return _this._updateDateMarkers(false);
          };
        })(this)
      });
    }
    this._uiElements.tl_wrapper.addEventListener("webkitTransitionEnd", (function(_this) {
      return function(e) {
        _this._updateNowDate();
        return _this._updateDateMarkers(false);
      };
    })(this), false);
    this._uiElements.tl_wrapper.addEventListener("transitionend", (function(_this) {
      return function(e) {
        _this._updateNowDate();
        return _this._updateDateMarkers(false);
      };
    })(this), false);
    this._uiElements.tl_wrapper.addEventListener("oTransitionEnd", (function(_this) {
      return function(e) {
        _this._updateNowDate();
        return _this._updateDateMarkers(false);
      };
    })(this), false);
    this._play = false;
    this._speed = 1;
    this._stopDate = this.yearToDate(this._config.maxYear);
    this._nextHiventhandle = null;
    setInterval(this._animTimeline, 30);
    this._uiElements.tl.addEventListener("mousewheel", (function(_this) {
      return function(e) {
        e.preventDefault();
        return _this._zoom(e.wheelDelta, e);
      };
    })(this));
    this._uiElements.tl.addEventListener("DOMMouseScroll", (function(_this) {
      return function(e) {
        e.preventDefault();
        return _this._zoom(-e.detail, e);
      };
    })(this));
    $(window).resize((function(_this) {
      return function() {
        _this._updateLayout();
        _this._updateDateMarkers();
        return _this._updateNowDate();
      };
    })(this));
    this._updateLayout();
    this._updateDateMarkers();
    this._updateNowDate();
  }

  Timeline.prototype.hgInit = function(hgInstance) {
    return hgInstance.onAllModulesLoaded(this, (function(_this) {
      return function() {
        _this._hiventController = hgInstance.hiventController;
        _this.notifyAll("onNowChanged", _this._now.date);
        _this.notifyAll("onIntervalChanged", _this._getTimeFilter());
        if (hgInstance.zoom_buttons_timeline) {
          hgInstance.zoom_buttons_timeline.onZoomIn(_this, function() {
            return _this._zoom(1);
          });
          return hgInstance.zoom_buttons_timeline.onZoomOut(_this, function() {
            return _this._zoom(-1);
          });
        }
      };
    })(this));
  };

  Timeline.prototype.getMinYear = function() {
    return this._config.minYear;
  };

  Timeline.prototype.getMaxYear = function() {
    return this._config.maxYear;
  };

  Timeline.prototype.addUIElement = function(id, className, parentDiv, type) {
    var container;
    if (type == null) {
      type = "div";
    }
    container = document.createElement(type);
    container.id = id;
    if (className != null) {
      container.className = className;
    }
    if (parentDiv != null) {
      parentDiv.appendChild(container);
    }
    return container;
  };

  Timeline.prototype.millisPerPixel = function() {
    var mpp;
    return mpp = (this.yearToMillis(this._config.maxYear - this._config.minYear) / window.innerWidth) / this._config.timelineZoom;
  };

  Timeline.prototype.minVisibleDate = function() {
    var d;
    return d = new Date(this._now.date.getTime() - (this.millisPerPixel() * window.innerWidth / 2));
  };

  Timeline.prototype.maxVisibleDate = function() {
    var d;
    return d = new Date(this._now.date.getTime() + (this.millisPerPixel() * window.innerWidth / 2));
  };

  Timeline.prototype.timelineLength = function() {
    return this.yearToMillis(this._config.maxYear - this._config.minYear) / this.millisPerPixel();
  };

  Timeline.prototype.timeInterval = function(i) {
    var x;
    x = Math.floor(i / 3);
    if (i % 3 === 0) {
      return this.yearToMillis(Math.pow(10, x));
    }
    if (i % 3 === 1) {
      return this.yearToMillis(2 * Math.pow(10, x));
    }
    if (i % 3 === 2) {
      return this.yearToMillis(5 * Math.pow(10, x));
    }
  };

  Timeline.prototype.dateToPosition = function(date) {
    var dateDiff, pos;
    dateDiff = date.getTime() - this.yearToDate(this._config.minYear).getTime();
    return pos = (dateDiff / this.millisPerPixel()) + window.innerWidth / 2;
  };

  Timeline.prototype.yearToDate = function(year) {
    var date;
    date = new Date(0);
    date.setFullYear(year);
    date.setMonth(0);
    date.setDate(1);
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    return date;
  };

  Timeline.prototype.yearToMillis = function(year) {
    var millis;
    return millis = year * 365.25 * 24 * 60 * 60 * 1000;
  };

  Timeline.prototype.millisToYear = function(millis) {
    var year;
    return year = millis / 1000 / 60 / 60 / 24 / 365.25;
  };

  Timeline.prototype.daysToMillis = function(days) {
    var millis;
    return millis = days * 24 * 60 * 60 * 1000;
  };

  Timeline.prototype.millisToDays = function(millis) {
    var days;
    return days = millis / 1000 / 60 / 60 / 24;
  };

  Timeline.prototype.stringToDate = function(string) {
    var d, i, res;
    res = (string + "").split(".");
    i = res.length;
    d = new Date(1900, 0, 1);
    if (i > 0) {
      d.setFullYear(res[i - 1]);
    } else {
      alert("Error: were not able to convert string to date.");
    }
    if (i > 1) {
      d.setMonth(res[i - 2] - 1);
    }
    if (i > 2) {
      d.setDate(res[i - 3]);
    }
    return d;
  };

  Timeline.prototype.updateTimeBars = function(activeTimeBars) {
    var oldTimeBar, timeBarValues, _i, _j, _len, _len1, _ref, _results;
    _ref = this._uiElements.timeBars;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      oldTimeBar = _ref[_i];
      oldTimeBar.div.style.display = "none";
      this.getCanvas().removeChild(oldTimeBar.div);
    }
    this._uiElements.timeBars = [];
    _results = [];
    for (_j = 0, _len1 = activeTimeBars.length; _j < _len1; _j++) {
      timeBarValues = activeTimeBars[_j];
      _results.push(this._drawTimeBar(timeBarValues));
    }
    return _results;
  };

  Timeline.prototype.moveToDate = function(date, delay, successCallback) {
    var dateDiff;
    if (delay == null) {
      delay = 0;
    }
    if (successCallback == null) {
      successCallback = void 0;
    }
    if (this.yearToDate(this._config.minYear).getTime() > date.getTime()) {
      return this.moveToDate(this.yearToDate(this._config.minYear), delay, successCallback);
    } else if (this.yearToDate(this._config.maxYear).getTime() < date.getTime()) {
      return this.moveToDate(this.yearToDate(this._config.maxYear), delay, successCallback);
    } else {
      dateDiff = this.yearToDate(this._config.minYear).getTime() - date.getTime();
      this._uiElements.tl_wrapper.style.transition = delay + "s";
      this._uiElements.tl_wrapper.style.transform = "translate3d(" + dateDiff / this.millisPerPixel() + "px ,0px, 0px)";
      this._uiElements.tl_wrapper.style.webkitTransform = "translate3d(" + dateDiff / this.millisPerPixel() + "px ,0px, 0px)";
      this._uiElements.tl_wrapper.style.MozTransform = "translate3d(" + dateDiff / this.millisPerPixel() + "px ,0px, 0px)";
      this._uiElements.tl_wrapper.style.MsTransform = "translate3d(" + dateDiff / this.millisPerPixel() + "px ,0px, 0px)";
      this._uiElements.tl_wrapper.style.oTransform = "translate3d(" + dateDiff / this.millisPerPixel() + "px ,0px, 0px)";
      this._animationTargetDate = date;
      this._now.date = date;
      this._now.marker.nowDateChanged();
      this.notifyAll("onNowChanged", this._now.date);
      this.notifyAll("onIntervalChanged", this._getTimeFilter());
      return typeof successCallback === "function" ? successCallback() : void 0;
    }
  };

  Timeline.prototype.getLayout = function() {
    return this._uiElements;
  };

  Timeline.prototype.getNowDate = function() {
    return this._now.date;
  };

  Timeline.prototype.getNowMarker = function() {
    return this._now.marker;
  };

  Timeline.prototype.getParentDiv = function() {
    return this._config.parentDiv;
  };

  Timeline.prototype.getCanvas = function() {
    return this._uiElements.tl_slide;
  };

  Timeline.prototype.stopTimeline = function() {
    return this._play = false;
  };

  Timeline.prototype.playTimeline = function() {
    return this._play = true;
  };

  Timeline.prototype.setSpeed = function(speed) {
    return this._speed = speed;
  };

  Timeline.prototype.getPlayStatus = function() {
    return this._play;
  };

  Timeline.prototype._updateLayout = function() {
    this._uiElements.tl.style.width = window.innerWidth + "px";
    this._uiElements.tl_slide.style.width = (this.timelineLength() + window.innerWidth) + "px";
    this.moveToDate(this._now.date, 0);
    return this._timeline_swiper.reInit();
  };

  Timeline.prototype._updateNowDate = function(fireCallbacks) {
    if (fireCallbacks == null) {
      fireCallbacks = true;
    }
    if (this._animationTargetDate != null) {
      this._now.date = this._animationTargetDate;
      this._animationTargetDate = null;
    } else {
      this._now.date = new Date(this.yearToDate(this._config.minYear).getTime() + (-1) * this._timeline_swiper.getWrapperTranslate("x") * this.millisPerPixel());
    }
    this._now.marker.nowDateChanged();
    if (fireCallbacks) {
      this.notifyAll("onNowChanged", this._now.date);
      return this.notifyAll("onIntervalChanged", this._getTimeFilter());
    }
  };

  Timeline.prototype._drawTimeBar = function(timeBarValues) {
    var endDate, maxDate, startDate, tb_div, timeBar, _results, _results1;
    startDate = this.stringToDate(timeBarValues[0]);
    endDate = this.stringToDate(timeBarValues[1]);
    tb_div = this.addUIElement("tl_timebar_" + timeBarValues[2], "tl_timebar", this.getCanvas());
    tb_div.style.left = this.dateToPosition(startDate) + "px";
    tb_div.style.width = (this.dateToPosition(endDate) - this.dateToPosition(startDate)) + "px";
    timeBar = {
      div: tb_div,
      startDate: startDate,
      endDate: endDate
    };
    this._uiElements.timeBars.push(timeBar);
    this.moveToDate(startDate, 0.5);
    if (timeBar.endDate > this.maxVisibleDate()) {
      _results = [];
      while (timeBar.endDate > this.maxVisibleDate()) {
        if (!this._zoom(-1)) {
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      _results1 = [];
      while (timeBar.endDate < maxDate || (maxDate == null)) {
        if (!this._zoom(1)) {
          break;
        } else {
          _results1.push(maxDate = new Date(this.maxVisibleDate().getTime() - ((this.maxVisibleDate().getTime() - timeBar.startDate.getTime()) * 0.2)));
        }
      }
      return _results1;
    }
  };

  Timeline.prototype._updateTimeBarPositions = function() {
    var timeBar, _i, _len, _ref, _results;
    _ref = this._uiElements.timeBars;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      timeBar = _ref[_i];
      timeBar.div.style.left = this.dateToPosition(timeBar.startDate) + "px";
      _results.push(timeBar.div.style.width = (this.dateToPosition(timeBar.endDate) - this.dateToPosition(timeBar.startDate)) + "px");
    }
    return _results;
  };

  Timeline.prototype._updateEpochs = function() {
    var epoch, _i, _len, _ref, _results;
    _ref = this._config.epochs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      epoch = _ref[_i];
      if (epoch.div == null) {
        epoch.div = document.createElement("div");
        epoch.div.id = "epoch" + epoch.name;
        epoch.div.className = "tl_epoch";
        epoch.div.innerHTML = epoch.name;
        epoch.div.style.left = this.dateToPosition(epoch.startDate) + "px";
        epoch.div.style.width = (this.dateToPosition(epoch.endDate) - this.dateToPosition(epoch.startDate)) + "px";
        epoch.div.style.display = "none";
        this.getCanvas().appendChild(epoch.div);
        $(epoch.div).on("click", {
          value: epoch
        }, (function(_this) {
          return function(event) {
            var diff, epoch_tmp, middleDate, millisec;
            epoch_tmp = event.data.value;
            diff = epoch_tmp.endDate.getTime() - epoch_tmp.startDate.getTime();
            millisec = diff / 2 + epoch_tmp.startDate.getTime();
            middleDate = new Date(millisec);
            return _this.moveToDate(middleDate, 0.5);
          };
        })(this));
        _results.push($(epoch.div).fadeIn(200));
      } else {
        epoch.div.style.left = this.dateToPosition(epoch.startDate) + "px";
        epoch.div.style.width = (this.dateToPosition(epoch.endDate) - this.dateToPosition(epoch.startDate)) + "px";
        if (this.dateToPosition(epoch.startDate) < this.dateToPosition(this._now.date) && this.dateToPosition(this._now.date) < this.dateToPosition(epoch.endDate)) {
          _results.push(epoch.div.className = "tl_epoch_highlighted");
        } else {
          _results.push(epoch.div.className = "tl_epoch");
        }
      }
    }
    return _results;
  };

  Timeline.prototype._updateDateMarkers = function(zoomed) {
    var count, date, dateMarkerMaxWidth, element, i, index, intervalIndex, maxDate, minDate, _i, _j;
    if (zoomed == null) {
      zoomed = true;
    }
    this._updateEpochs();
    count = this._config.maxYear - this._config.minYear;
    if (this._uiElements.dateMarkers.getLength() === 0) {
      for (i = _i = 0; 0 <= count ? _i <= count : _i >= count; i = 0 <= count ? ++_i : --_i) {
        this._uiElements.dateMarkers.addLast(null);
      }
    }
    index = 0;
    while (this.timeInterval(index) <= window.innerWidth * this.millisPerPixel()) {
      index++;
    }
    intervalIndex = index - 3;
    if (intervalIndex < 0) {
      intervalIndex = 0;
    }
    dateMarkerMaxWidth = window.innerWidth / (this.millisToYear(window.innerWidth * this.millisPerPixel()) / this.millisToYear(this.timeInterval(intervalIndex)));
    maxDate = this.maxVisibleDate();
    minDate = this.minVisibleDate();
    for (i = _j = 0; 0 <= count ? _j <= count : _j >= count; i = 0 <= count ? ++_j : --_j) {
      if ((this._config.minYear + i) % this.millisToYear(this.timeInterval(intervalIndex)) === 0 && (this._config.minYear + i) >= minDate.getFullYear() && (this._config.minYear + i) <= maxDate.getFullYear()) {
        if (this._uiElements.dateMarkers.get(i).nodeData != null) {
          this._uiElements.dateMarkers.get(i).nodeData.updateView(true);
          element = this._uiElements.dateMarkers.get(i).nodeData.getDiv();
          element.style.maxWidth = dateMarkerMaxWidth + "px";
          if (Math.round(dateMarkerMaxWidth / 2.6) <= 100) {
            $(element).css({
              'font-size': (Math.round(dateMarkerMaxWidth / 2.6)) + 'px'
            });
          } else {
            $(element).css({
              'font-size': '100px'
            });
          }
        } else {
          date = new Date(this._config.minYear + i, 0, 1, 0, 0, 0);
          this._uiElements.dateMarkers.get(i).nodeData = new HG.DateMarker(date, this);
          element = this._uiElements.dateMarkers.get(i).nodeData.getDiv();
          element.style.maxWidth = dateMarkerMaxWidth + "px";
          if (Math.round(dateMarkerMaxWidth / 2.6) <= 100) {
            $(element).css({
              'font-size': (Math.round(dateMarkerMaxWidth / 2.6)) + 'px'
            });
          } else {
            $(element).css({
              'font-size': '100px'
            });
          }
        }
      } else {
        if (this._uiElements.dateMarkers.get(i).nodeData != null) {
          this._uiElements.dateMarkers.get(i).nodeData.updateView(false);
          this._uiElements.dateMarkers.get(i).nodeData = null;
        }
      }
    }
    return this._updateTimeBarPositions();
  };

  Timeline.prototype._zoom = function(delta, e) {
    var zoomed;
    if (e == null) {
      e = null;
    }
    zoomed = false;
    if (delta > 0) {
      if (this.maxVisibleDate().getFullYear() - this.minVisibleDate().getFullYear() > 2) {
        this._config.timelineZoom *= 1.1;
        zoomed = true;
      }
    } else {
      if (this._config.timelineZoom > 1) {
        this._config.timelineZoom /= 1.1;
        zoomed = true;
      }
    }
    if (zoomed) {
      this._updateLayout();
      this._updateDateMarkers();
      this.notifyAll("onZoom");
    }
    return zoomed;
  };

  Timeline.prototype._animTimeline = function() {
    var toDate, zoomed;
    if (this._play) {
      if (this._now.date.getFullYear() <= this._config.maxYear) {
        toDate = new Date(this._now.date.getTime() + this._speed * this._speed * 5000 * 60 * 60 * 24 * 7);
        this.moveToDate(toDate, 0);
        this._updateNowDate();
        return this._updateDateMarkers(zoomed = false);
      } else {
        return this._now.marker.animationSwitch();
      }
    }
  };

  Timeline.prototype._getTimeFilter = function() {
    var timefilter;
    timefilter = [];
    timefilter.end = this.maxVisibleDate();
    timefilter.now = this._now.date;
    timefilter.start = this.minVisibleDate();
    return timefilter;
  };

  Timeline.prototype._disableTextSelection = function(e) {
    return false;
  };

  Timeline.prototype._enableTextSelection = function() {
    return true;
  };

  return Timeline;

})();
